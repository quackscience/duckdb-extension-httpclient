# name: test/sql/httpclient.test
# description: test http_client extension
# group: [http_client]

# Before we load the extension, this will fail
statement error
SELECT http_get('Sam');
----
Catalog Error: Scalar Function with name http_get does not exist!

# Require statement will ensure this test is run with this extension loaded
require http_client

require json

# Confirm the GET extension works
query III
WITH __input AS (
  SELECT
    http_get(
        'https://httpbin.org/delay/0'
    ) AS res
),
__response AS (
  SELECT
    (res->>'status')::INT AS status,
    (res->>'reason') AS reason,
    unnest( from_json(((res->>'body')::JSON)->'headers', '{"Host": "VARCHAR"}') ) AS features
  FROM
    __input
)
SELECT
  __response.status,
  __response.reason,
  __response.Host AS host
FROM
  __response
;
----
200	OK	httpbin.org

# Confirm the GET extension works with headers and params
query III
WITH __input AS (
  SELECT
    http_get(
        'https://httpbin.org/delay/0',
        headers => MAP {
          'accept': 'application/json',
        },
        params => MAP {
          'limit': 10
        }
    ) AS res
),
__response AS (
  SELECT
    (res->>'status')::INT AS status,
    (res->>'reason') AS reason,
    unnest( from_json(((res->>'body')::JSON)->'headers', '{"Host": "VARCHAR"}') ) AS features
  FROM
    __input
)
SELECT
  __response.status,
  __response.reason,
  __response.Host AS host
FROM
  __response
;
----
200	OK	httpbin.org

# Confirm the POST extension works
query III
WITH __input AS (
  SELECT
    http_post(
        'https://httpbin.org/delay/0',
        headers => MAP {
          'accept': 'application/json',
        },
        params => MAP {
        }
    ) AS res
),
__response AS (
  SELECT
    (res->>'status')::INT AS status,
    (res->>'reason') AS reason,
    unnest( from_json(((res->>'body')::JSON)->'headers', '{"Host": "VARCHAR"}') ) AS features
  FROM
    __input
)
SELECT
  __response.status,
  __response.reason,
  __response.Host AS host
FROM
  __response
;
----
200	OK	httpbin.org

# Confirm the POST extension works with headers and params
query I
WITH __input AS (
  SELECT
    http_post(
      'https://earth-search.aws.element84.com/v0/search',
      headers => MAP {
        'Content-Type': 'application/json',
        'Accept-Encoding': 'gzip',
        'Accept': 'application/geo+json'
      },
      params => {
        'collections': ['sentinel-s2-l2a-cogs'],
        'ids': ['S2A_56LPN_20210930_0_L2A'],
        'datetime': '2021-09-30/2021-09-30',
        'limit': 10
      }
    ) AS res
),
__response AS (
  SELECT
    unnest( from_json(((res->>'body')::JSON)->'features', '["json"]') ) AS features
  FROM
    __input
)
SELECT
  features->>'id' AS id
FROM
  __response
;
----
S2A_56LPN_20210930_0_L2A

# Confirm the POST function with form request works
query III
WITH __input AS (
  SELECT
    http_post_form(
        'https://httpbin.org/delay/0',
        headers => MAP {
          'accept': 'application/json',
        },
        params => MAP {
          'limit': 10
        }
    ) AS res
),
__response AS (
  SELECT
    (res->>'status')::INT AS status,
    (res->>'reason') AS reason,
    unnest( from_json(((res->>'body')::JSON)->'headers', '{"Host": "VARCHAR"}') ) AS features
  FROM
    __input
)
SELECT
  __response.status,
  __response.reason,
  __response.Host AS host
FROM
  __response
;
----
200	OK	httpbin.org

# Confirm the POST function with form encoding transmits a single value
query III
WITH __input AS (
  SELECT
    http_post_form(
        'https://httpbin.org/delay/0',
        headers => MAP {
          'accept': 'application/json',
        },
        params => MAP {
          'limit': 10
        }
    ) AS res
),
__response AS (
  SELECT
    (res->>'status')::INT AS status,
    (res->>'reason') AS reason,
    unnest( from_json(((res->>'body')::JSON)->'form', '{"limit": "VARCHAR"}') ) AS features
  FROM
    __input
)
SELECT
  __response.status,
  __response.reason,
  __response.limit AS limit
FROM
  __response
;
----
200	OK	10

